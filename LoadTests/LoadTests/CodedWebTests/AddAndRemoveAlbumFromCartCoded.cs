//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using LoadTests.Database;

namespace LoadTests
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;

    [Priority(0)]
    public class AddAndRemoveAlbumFromCartCoded : WebTest
    {
        public AddAndRemoveAlbumFromCartCoded()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            Genre genre;
            Album album;
            GetRandomGenreAndAlbum(out genre, out album);

            WebTestRequest request1 = new WebTestRequest("http://musicstoreapp.azurewebsites.net/Store/Browse");
            request1.ThinkTime = 2;
            request1.Timeout = 60;
            request1.Headers.Add(new WebTestRequestHeader("DNT", "1"));
            request1.QueryStringParameters.Add("Genre", genre.Name);
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest(string.Format("http://musicstoreapp.azurewebsites.net/Store/Details/{0}", album.AlbumId));
            request2.ThinkTime = 6;
            request2.Timeout = 60;
            request2.Headers.Add(new WebTestRequestHeader("DNT", "1"));
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest(string.Format("http://musicstoreapp.azurewebsites.net/ShoppingCart/AddToCart/{0}", album.AlbumId));
            request3.ThinkTime = 5;
            request3.Timeout = 60;
            request3.Headers.Add(new WebTestRequestHeader("DNT", "1"));
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest("http://musicstoreapp.azurewebsites.net/ShoppingCart");
            request4.ThinkTime = 8;
            request4.Timeout = 60;
            request4.Headers.Add(new WebTestRequestHeader("DNT", "1"));
            ExtractText extractionRule2 = new ExtractText();
            extractionRule2.StartsWith = "data-id=\"";
            extractionRule2.EndsWith = "\"\r\n                  data-url";
            extractionRule2.Index = 0;
            extractionRule2.IgnoreCase = false;
            extractionRule2.UseRegularExpression = false;
            extractionRule2.HtmlDecode = true;
            extractionRule2.Required = false;
            extractionRule2.ContextParameterName = "IdToRemove";
            request4.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest("http://musicstoreapp.azurewebsites.net/ShoppingCart/RemoveFromCart");
            request5.Timeout = 60;
            request5.Method = "POST";
            request5.Headers.Add(new WebTestRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"));
            request5.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request5.Headers.Add(new WebTestRequestHeader("DNT", "1"));
            request5.Headers.Add(new WebTestRequestHeader("Pragma", "no-cache"));
            FormPostHttpBody request5Body = new FormPostHttpBody();
            request5Body.FormPostParameters.Add("id", this.Context["IdToRemove"].ToString());
            request5.Body = request5Body;
            yield return request5;
            request5 = null;
        }

        private static List<Genre> genres;

        private static void GetRandomGenreAndAlbum(out Genre genre, out Album album)
        {
            if (genres == null)
            {
                using (MusicStoreContext context = new MusicStoreContext("MusicStoreDb"))
                {
                    genres = context.Genres.ToList();
                    // Load albums
                    context.Albums.ToList();
                }
            }

            Random random = new Random(DateTime.Now.Millisecond);

            genre = genres[random.Next(0, genres.Count - 1)];
            album = genre.Albums[random.Next(0, genre.Albums.Count - 1)];
        }
    }
}
